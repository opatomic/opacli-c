#!/bin/bash

handleErr() {
	echo "$(basename "$BASH_SOURCE"): Error on line $1" >&2; exit 1
}
trap 'handleErr $LINENO' ERR


testDeps() {
	for i in "$@"; do $i --version > /dev/null 2>&1 || { echo "error: $i must be installed" >&2; exit 1; } ; done
}

# args: user, token, repo, releaseid, filename
uploadAsset() {
	echo "uploading $(basename "$5")"
	GHURL="https://uploads.github.com/repos/$1/$3/releases/$4/assets?name=$(basename "$5")"
	curl -s -S -u "$1:$2" -H "Content-Type: application/octet-stream" --data-binary @"$5" "$GHURL"
	echo "uploaded to $GHURL"
}



# make sure dependencies are installed
testDeps git jq curl


GHUSER="opatomic"
GHREPO=$(basename "$(dirname "$PWD")")
if [ -z "$GHTOKEN" ]; then
	GHTOKENFILE="${GHTOKENFILE:-$HOME/githubtoken}"
	if [ ! -f "$GHTOKENFILE" ]; then
		echo "GHTOKEN or GHTOKENFILE must be set properly"
		exit 1
	fi
	GHTOKEN=$(cat "$GHTOKENFILE")
fi

[ "$(git rev-parse --is-inside-work-tree)" = "true" ] || (echo "error: not in git repo?" >&2; exit 1)

if [ "$PWD" != "$(git rev-parse --show-toplevel)/build" ]; then
	echo "error: running from wrong directory?" >&2; exit 1
fi

MODCNT=$(git status --porcelain | wc -l)
if [ "$MODCNT" -ne 0 ]; then
	echo "error: There are $MODCNT changes. Must revert or check in changes." >&2; exit 1
fi

VERSION=$(./verget)

if [ "v$VERSION" != "$(git describe --exact-match --tags HEAD)" ]; then
	echo "error: source is not clean copy of tagged version" >&2; exit 1
fi

GHTAG="v$VERSION"
GHRELURL="https://api.github.com/repos/$GHUSER/$GHREPO/releases/tags/v$VERSION"
GHRELID=$(curl -s -S -u "$GHUSER:$GHTOKEN" "$GHRELURL" | jq ".id")
if [ "$GHRELID" = "null" ]; then
	echo "creating github release $GHTAG"
	GHRELID=$(curl -s -S -u "$GHUSER:$GHTOKEN" -X POST "https://api.github.com/repos/$GHUSER/$GHREPO/releases" -d "{\"tag_name\":\"$GHTAG\"}" | jq ".id")
fi

if [ "$GHRELID" = "null" ]; then
	echo "URL=$GHRELURL"
	curl -s -S -u "$GHUSER:$GHTOKEN" "$GHRELURL"
	echo "error: could not determine release id"
	exit 1
fi


rm -rf out/*

UNAME="${UNAME:-$(uname | tr '[:upper:]' '[:lower:]')}"
if [ "$UNAME" = "linux" ]; then
	CCACHE="" CFLAGS="-flto -march=x86-64" LDFLAGS="-flto -march=x86-64 -Wl,--wrap=memcpy -Wl,--hash-style=both" ./build
	mv out/opacli "out/opacli-$VERSION-linux-x86_64"
	CCACHE="" CFLAGS="-flto -march=i686 -m32" LDFLAGS="-flto -march=i686 -m32 -Wl,--wrap=memcpy -Wl,--hash-style=both" ./build
	mv out/opacli "out/opacli-$VERSION-linux-x86"
	CCACHE="" CC="i686-w64-mingw32-gcc" AR="i686-w64-mingw32-ar" TGTOS=win ./build
	mv out/opacli.exe "out/opacli-$VERSION-win32.exe"
	CCACHE="" CC="x86_64-w64-mingw32-gcc" AR="x86_64-w64-mingw32-ar" TGTOS=win ./build
	mv out/opacli.exe "out/opacli-$VERSION-win64.exe"

	rm out/opacli-debug.exe
elif [ "$UNAME" = "darwin" ]; then
	CCACHE="" CFLAGS="-Os -flto -march=x86-64 -mmacosx-version-min=10.9" LDFLAGS="-flto -march=x86-64 -mmacosx-version-min=10.9" ./build
	mv out/opacli "out/opacli-$VERSION-macos-x86_64"
fi

rm out/opacli-debug


# upload files
cd out || exit 1
for FILE in *; do
	if [ -f "$FILE" ]; then
		uploadAsset "$GHUSER" "$GHTOKEN" "$GHREPO" "$GHRELID" "$FILE"
	fi
done
cd .. || exit 1

